buildscript {
  repositories {
    maven { url = 'https://plugins.gradle.org/m2/' }
    mavenCentral()
  }
}

plugins {
  id 'jacoco'
  id 'idea'
  id "com.vanniktech.maven.publish" version "0.34.0"
  id 'com.diffplug.spotless' version '7.2.1'
  id 'org.sonarqube' version '6.3.0.5676'
  id 'project-report'
  id 'io.codearte.nexus-staging' version '0.30.0'
  id 'org.cyclonedx.bom' version '2.3.1'
}

cyclonedxBom {
  schemaVersion = "1.5"
}

repositories {
  mavenCentral()
}

group = 'org.sdase.commons.spring.boot'
// the version of the generated jars is based on the SEMANTIC_VERSION environment variable
version = System.getenv('SEMANTIC_VERSION')

allprojects {
  apply plugin: 'idea'

  // Task for creating gradle.lockfile per module. Needed for Trivy vulnerability scan.
  tasks.register("resolveAndLockAll") {
    doFirst {
      assert gradle.startParameter.writeDependencyLocks
    }
    doLast {
      configurations.findAll {
        it.canBeResolved
      }.each { it.resolve() }
    }
  }
}

/**
 * Some modules must use the 'java-platform'. Since you can't apply plugins 'java' and 'java-platform'
 * at the same time, they are excluded in some steps.
 */
List<String> javaPlatformModules = Arrays.asList('sda-commons-dependencies', 'sda-commons-bom')

/**
 * There are some additional modules that are excluded from publishing
 */
List<String> unpublishedModules = javaPlatformModules + Arrays.asList('sda-commons-dependency-check')
project.ext.unpublishedModules = unpublishedModules

spotless {
  groovyGradle {
    greclipse()
    leadingTabsToSpaces(2)
  }
}

subprojects {
  apply plugin: 'signing'
  apply plugin: 'com.diffplug.spotless'
  apply plugin: 'project-report'

  repositories {
    mavenCentral()
  }

  group = rootProject.group
  version = rootProject.version

  // Disable publication of Gradle Module Metadata
  tasks.withType(GenerateModuleMetadata).configureEach {
    enabled = false
  }

  // configure the spotless to use the Google Java Format
  spotless {
    if (!javaPlatformModules.contains(project.name)) {
      java {
        googleJavaFormat('1.17.0')
        enforceCheck = false
        licenseHeaderFile '../licenseHeaderFile'
      }
      groovyGradle {
        greclipse()
        leadingTabsToSpaces(2)
      }
    }
  }

  if (!it.name.endsWith("-example") && !it.name.endsWith("-dependency-check")) {

    apply plugin: "com.vanniktech.maven.publish"

    tasks.withType(Sign).configureEach {
      // skip signing a publication to maven local
      onlyIf { !gradle.taskGraph.hasTask(publishToMavenLocal) }
    }

    mavenPublishing {
      publishToMavenCentral(true)
      signAllPublications()

      pom {
        name = project.group + ":" + project.name
        description = 'A library to bootstrap services easily that follow the patterns and specifications promoted by the SDA SE'
        url = 'https://github.com/SDA-SE/sda-spring-boot-commons'

        licenses {
          license {
            name = 'MIT License'
            url = 'https://raw.githubusercontent.com/SDA-SE/sda-spring-boot-commons/main/LICENSE'
          }
        }

        organization {
          name = 'SDA SE Open Industry Solutions'
          url = 'https://sda.se'
        }

        issueManagement {
          system = 'GitHub'
          url = 'https://github.com/SDA-SE/sda-spring-boot-commons/issues'
        }

        developers {
          developer {
            id = 'maintainer'
            name = 'SDA SE Open Industry Solutions Maintainer'
            email = 'oss@sda-se.com'
          }
        }

        scm {
          connection = 'scm:git:https://github.com/SDA-SE/sda-spring-boot-commons.git'
          developerConnection = 'scm:git:https://github.com/SDA-SE/sda-spring-boot-commons.git'
          url = 'https://github.com/SDA-SE/sda-spring-boot-commons'
        }
      }
    }
  }
}

configure(subprojects.findAll { !javaPlatformModules.contains(it.name) }) {
  apply plugin: 'jacoco'
  apply plugin: 'java-library'

  // activate dependency locking for most configurations
  var ignoredConfigurationPatternsForDependencyLocking = Set.of("test.*")
  configurations.matching { configuration ->
    !ignoredConfigurationPatternsForDependencyLocking.any { configuration.name.matches(it) }
  }.each {configuration ->
    // println "Activating dependency locking for '${it.name}:${configuration.name}'"
    configuration.resolutionStrategy.activateDependencyLocking()
  }

  java {
    sourceCompatibility = JavaVersion.VERSION_17
  }
  tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
  }

  jacoco {
    toolVersion = "0.8.12"
  }

  // output XML reports for SonarCloud
  jacocoTestReport {
    reports {
      xml.required = true
    }
  }

  // Configure sonar to use the aggregated global report file
  sonarqube {
    properties {
      property "sonar.coverage.jacoco.xmlReportPaths", '../build/reports/jacoco/report.xml'
    }
  }

  test {
    useJUnitPlatform()
  }

  configurations.configureEach {
    if (it.name.startsWith("spotless")) {
      // Workaround for https://github.com/diffplug/spotless/issues/1965.
    } else {
      it.resolutionStrategy {
        failOnVersionConflict()
      }
    }
  }

  dependencies {
    api enforcedPlatform(project(':sda-commons-dependencies'))
  }
}

/**
 * Add publishing configuration for Java modules.
 *
 * More Infos:
 * - sda-commons-bom and sda-commons-dependencies uses own publishing because it's just a BOM
 * - example modules and dependency-check should not be published at all
 */
configure(subprojects.findAll {
  !unpublishedModules.contains(it.name) && !it.name.endsWith("-example")
}) {

  javadoc {
    options.addStringOption('encoding', 'UTF-8')
  }

  jar {
    into("META-INF/maven/$project.group/$project.name") {
      from { generatePomFileForMavenPublication }
      rename ".*", "pom.xml"
    }
  }
}

/**
 * Add publishing configuration for Java platforms.
 */
configure(subprojects.findAll { javaPlatformModules.contains(it.name) }) {
  apply plugin: 'java-platform'
}

// Reconfigure the testReport task to display the results of all modules into a single report
tasks.register("testReport", TestReport) {
  destinationDirectory = project.layout.buildDirectory.dir("reports/allTests")
  // Include the results from the `test` task in all subprojects
  testResults.from(
      subprojects.findAll { !javaPlatformModules.contains(it.name) }*.test.binaryResultsDirectory
      )
}

// Create a combined XML report of all modules in the root project
tasks.register("codeCoverageReport", JacocoReport) {
  dependsOn = [
    testReport,
    spotlessGroovyGradle
  ]

  executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

  subprojects.findAll { !javaPlatformModules.contains(it.name) }.each {
    // noinspection GroovyAssignabilityCheck
    sourceSets it.sourceSets.main
    codeCoverageReport.dependsOn("${it.path}:spotlessJava")
    codeCoverageReport.dependsOn("${it.path}:spotlessGroovyGradle")
  }

  reports {
    xml.required = true
    xml.outputLocation = project.layout.buildDirectory.file("reports/jacoco/report.xml")
  }
}

sonarqube {
  properties {
    property 'sonar.projectKey', 'SDA-SE_sda-spring-boot-commons'
    property 'sonar.organization', 'sda-se'
    property 'sonar.host.url', 'https://sonarcloud.io'
    property 'sonar.token', System.getenv('SONAR_LOGIN_TOKEN')

    property 'sonar.pullrequest.provider', 'GitHub'
    property 'sonar.pullrequest.github.repository', System.getenv('GITHUB_REPOSITORY')

    if (System.getenv('GITHUB_PR') != null && System.getenv('GITHUB_PR') != "") {
      property 'sonar.pullrequest.key', System.getenv('GITHUB_PR')
      if (System.getenv('GITHUB_BRANCH') != null) {
        property 'sonar.pullrequest.branch', System.getenv('GITHUB_BRANCH')
      }
    }

    if (System.getenv('SONAR_SCM_REVISION') != null) {
      property 'sonar.scm.revision', System.getenv('SONAR_SCM_REVISION')
    }
  }
}
