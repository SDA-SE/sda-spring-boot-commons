
buildscript {
  repositories {
    maven { url "https://plugins.gradle.org/m2/" }
  }
}

plugins {
  id "jacoco"
  id "idea"
  id 'maven-publish'
  id 'signing'
  id "com.diffplug.spotless" version "6.10.0"
  id 'io.spring.dependency-management' version '1.0.13.RELEASE'
  id 'org.sonarqube' version '3.4.0.2513'
  id 'project-report'
}

ext {
  springCloudVersion = "2021.0.3"
  springBootVersion = "2.7.3"
}

repositories {
  mavenCentral()
}

group "org.sdase.commons.spring.boot"


subprojects {
  apply plugin: 'jacoco'
  apply plugin: 'idea'
  apply plugin: 'java'
  apply plugin: 'java-library'
  apply plugin: 'maven-publish'
  apply plugin: 'signing'
  apply plugin: "com.diffplug.spotless"
  apply plugin: 'io.spring.dependency-management'
  apply plugin: 'project-report'

  repositories {
    mavenCentral()
  }

  group "org.sdase.commons.spring.boot"

  sourceCompatibility = JavaVersion.VERSION_17

  // the version of the generated jars is based on the SEMANTIC_VERSION environment variable
  version = System.getenv("SEMANTIC_VERSION")

  // Disable publication of Gradle Module Metadata
  tasks.withType(GenerateModuleMetadata) {
    enabled = false
  }

  dependencyManagement {
    imports {
      mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
      mavenBom("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}")
    }
  }

  test {
    useJUnitPlatform()
  }

  // configure the spotless to use the Google Java Format
  spotless {
    java {
      googleJavaFormat('1.15.0')
      enforceCheck = false
      licenseHeaderFile '../licenseHeaderFile'
    }
  }

  if (!it.name.endsWith("-example")) {

    signing {
      def signingKey = findProperty("signingKey")
      def signingPassword = findProperty("signingPassword")
      useInMemoryPgpKeys(signingKey, signingPassword)
      sign publishing.publications
    }

    tasks.withType(Sign) {
      // skip signing a publication to maven local
      onlyIf { !gradle.taskGraph.hasTask(publishMavenPublicationToMavenLocal) }
    }

    publishing {
      publications {
        maven(MavenPublication) {
          from components.java
          versionMapping {
            usage('java-api') {
              fromResolutionOf('runtimeClasspath')
            }
            usage('java-runtime') {
              fromResolutionResult()
            }
          }
          pom {
            name = project.group + ":" + project.name
            description = 'A libraries to bootstrap services easily that follow the patterns and specifications promoted by the SDA SE'
            url = 'https://github.com/SDA-SE/sda-spring-boot-commons'

            licenses {
              license {
                name = 'MIT License'
                url = 'https://raw.githubusercontent.com/SDA-SE/sda-spring-boot-commons/master/LICENSE'
              }
            }

            organization {
              name = 'SDA SE Open Industry Solutions'
              url = 'https://sda.se'
            }

            issueManagement {
              system = 'GitHub'
              url = 'https://github.com/SDA-SE/sda-spring-boot-commons/issues'
            }

            scm {
              connection = 'scm:git:https://github.com/SDA-SE/sda-spring-boot-commons.git'
              developerConnection = 'scm:git:https://github.com/SDA-SE/sda-spring-boot-commons.git'
              url = 'https://github.com/SDA-SE/sda-spring-boot-commons'
            }
          }
        }
      }

      repositories {
        maven {
          name = "sdaIntern"
          def releasesRepoUrl = "https://nexus.sda-se.io/repository/sda-se-releases/"
          def snapshotsRepoUrl = "https://nexus.sda-se.io/repository/sda-se-snapshots/"
          url = version.endsWith('-SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

          credentials {
            username System.getenv('SDA_NEXUS_USER')
            password System.getenv('SDA_NEXUS_PASSWORD')
          }
        }
      }
    }

  }
  // output XML reports for SonarCloud
  jacocoTestReport {
    reports {
      xml.required = true
    }
  }
  // Configure sonar to use the aggregated global report file
  sonarqube {
    properties {
      property "sonar.coverage.jacoco.xmlReportPaths", '../build/reports/jacoco/report.xml'
    }
  }

}

wrapper { gradleVersion = '7.4.2' }

// Reconfigure the testReport task to display the results of all modules into a single report
task testReport(type: TestReport) {
  destinationDir = file("$buildDir/reports/allTests")
  // Include the results from the `test` task in all subprojects
  reportOn subprojects.findAll { /*!javaPlatformModules.contains(it.name)*/ true }*.test
}

// Create a combined XML report of all modules in the root project
task codeCoverageReport(type: JacocoReport) {
  executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

  subprojects.findAll { /*!unpublishedModules.contains(it.name)*/ true }.each {
    // noinspection GroovyAssignabilityCheck
    sourceSets it.sourceSets.main
  }

  reports {
    xml.required = true
    xml.destination file("${buildDir}/reports/jacoco/report.xml")
  }
}

sonarqube {
  properties {
    property 'sonar.projectKey', 'SDA-SE_sda-spring-boot-commons'
    property 'sonar.organization', 'sda-se'
    property 'sonar.host.url', 'https://sonarcloud.io'
    property 'sonar.login', System.getenv('SONAR_LOGIN_TOKEN')

    property 'sonar.pullrequest.provider', 'GitHub'
    property 'sonar.pullrequest.github.repository', System.getenv('GITHUB_REPOSITORY')

    if (System.getenv('GITHUB_PR') != null && System.getenv('GITHUB_PR') != "") {
      property 'sonar.pullrequest.key', System.getenv('GITHUB_PR')
      if (System.getenv('GITHUB_BRANCH') != null) {
        property 'sonar.pullrequest.branch', System.getenv('GITHUB_BRANCH')
      }
    }

    if (System.getenv('SONAR_SCM_REVISION') != null) {
      property 'sonar.scm.revision', System.getenv('SONAR_SCM_REVISION')
    }

  }
}