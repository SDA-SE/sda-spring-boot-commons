dependencies {
  // We want to make sure that all bouncycastle modules that we import use the same version.
  components.all(BouncycastleAlignmentRule)

  api project(":sda-commons-asyncapi")
  api project(":sda-commons-cacertificates")
  api project(":sda-commons-cloudevents")
  api project(":sda-commons-error")
  api project(":sda-commons-metadata-context")
  api project(":sda-commons-starter-kafka")
  api project(":sda-commons-starter-mongodb")
  api project(":sda-commons-starter-s3")
  api project(":sda-commons-starter-web")
  api project(":sda-commons-web-testing")

  testImplementation "io.github.classgraph:classgraph"
}

/**
 * A rule that verifies all bouncycastle modules to use the same version. Mixed versions will break
 * the build. It does not have an effect on consumers since this module is not published and
 * never used.
 */
class BouncycastleAlignmentRule implements ComponentMetadataRule {
  @Override
  void execute(ComponentMetadataContext ctx) {
    ctx.details.with {
      if (id.group == "org.bouncycastle") {
        // declare that the modules belong to the bouncycastle virtual platform
        belongsTo("org.bouncycastle:bouncycastle-virtual-platform:${id.version}")
      }
    }
  }
}